import React, { useState, useEffect, useRef } from 'react';
import { ArrowDown, ArrowUp, Calendar, ChevronDown, Clock, DollarSign, BarChart, RefreshCw, Share2, Star, Settings, Maximize2, TrendingUp, Volume2, Activity, Wifi, WifiOff } from 'lucide-react';
import { FormattedMessage, FormattedNumber } from 'react-intl';
import TradingViewChart from '../TradingViewChart';
import SymbolSelector from '../components/common/SymbolSelector';
// WebSocket connection status
type ConnectionStatus = 'connecting' | 'connected' | 'disconnected' | 'error';

// Market data interfaces
interface KlineData {
  symbol: string;
  openTime: number;
  closeTime: number;
  open: string;
  high: string;
  low: string;
  close: string;
  volume: string;
  trades: number;
}

interface TickerData {
  symbol: string;
  priceChange: string;
  priceChangePercent: string;
  weightedAvgPrice: string;
  prevClosePrice: string;
  lastPrice: string;
  lastQty: string;
  bidPrice: string;
  askPrice: string;
  openPrice: string;
  highPrice: string;
  lowPrice: string;
  volume: string;
  quoteVolume: string;
  openTime: number;
  closeTime: number;
  count: number;
}

interface OrderBookEntry {
  price: string;
  quantity: string;
  total?: number;
}

interface OrderBookData {
  lastUpdateId: number;
  bids: OrderBookEntry[];
  asks: OrderBookEntry[];
}

interface TradeData {
  id: number;
  price: string;
  qty: string;
  time: number;
  isBuyerMaker: boolean;
}

interface BookTickerData {
  symbol: string;
  bidPrice: string;
  bidQty: string;
  askPrice: string;
  askQty: string;
}

interface MiniTickerData {
  symbol: string;
  close: string;
  open: string;
  high: string;
  low: string;
  volume: string;
  quoteVolume: string;
}

// Account interfaces (for authenticated streams)
interface AccountInfo {
  makerCommission: number;
  takerCommission: number;
  buyerCommission: number;
  sellerCommission: number;
  canTrade: boolean;
  canWithdraw: boolean;
  canDeposit: boolean;
  balances: Array<{
    asset: string;
    free: string;
    locked: string;
  }>;
}

interface OrderUpdate {
  symbol: string;
  orderId: number;
  orderListId: number;
  clientOrderId: string;
  price: string;
  origQty: string;
  executedQty: string;
  cummulativeQuoteQty: string;
  status: string;
  timeInForce: string;
  type: string;
  side: string;
  stopPrice: string;
  icebergQty: string;
  time: number;
  updateTime: number;
  isWorking: boolean;
}
interface SymbolItem {
  symbol: string;
}

// Clean WebSocket service structure
class BinanceWebSocketService {
  private ws: WebSocket | null = null;
  private subscriptions: Set<string> = new Set();
  private callbacks: Map<string, (data: any) => void> = new Map();
  private isAuthenticated = false;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectDelay = 1000;
  private isConnected = false;

  public onStatusChange: (status: ConnectionStatus) => void = () => {};

  constructor() {
    this.connect();
  }
private handleMessage(data: any) {
  console.log('üì© Raw Incoming:', data);

  // Tr∆∞·ªùng h·ª£p c√≥ "stream" (th∆∞·ªùng th·∫•y khi server tr·∫£ v·ªÅ ki·ªÉu m·ªõi)
  if (data.stream) {
    console.log('üß™ Detected stream:', data.stream);
    const callback = this.callbacks.get(data.stream);
    if (callback) {
      console.log('‚úÖ Found callback for stream:', data.stream);
      callback(data.data);
    } else {
      console.warn('‚ö†Ô∏è No callback found for stream:', data.stream);
    }

  // Tr∆∞·ªùng h·ª£p c√≥ "symbol" v√† "eventType" (fallback n·∫øu kh√¥ng c√≥ stream)
  } else if (data.symbol && data.eventType) {
    const streamKey = `${data.symbol.toLowerCase()}@${data.eventType}`;
    console.log('üß™ Detected eventType:', data.eventType, '‚Üí streamKey:', streamKey);
    const callback = this.callbacks.get(streamKey);
    if (callback) {
      console.log('‚úÖ Found callback for streamKey:', streamKey);
      callback(data);
    } else {
      console.warn('‚ö†Ô∏è No callback found for streamKey:', streamKey);
    }

  } else {
    console.warn('‚ùì Unknown message format:', data);
  }
}

  private connect() {
  try {
    this.onStatusChange('connecting');

    this.ws = new WebSocket('ws://45.77.33.141/w-binance-socket/signalr/connect');

    this.ws.onopen = () => {
      console.log('‚úÖ WebSocket connected');
      this.onStatusChange('connected');
      this.isConnected = true;

      const subs = [
        { action: 'subscribePublicTicker', symbol: 'BTCUSDT' },
        { action: 'subscribePublicKline', symbol: 'BTCUSDT', interval: '1m' },
        { action: 'subscribePublicTrade', symbol: 'BTCUSDT' }
      ];

      for (const msg of subs) {
        if (this.ws?.readyState === WebSocket.OPEN) {
          this.ws.send(JSON.stringify(msg));
          console.log('üì§ Sent:', msg);
        }
      }
    };

    this.ws.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        console.log('üì• Incoming:', data);
        this.handleMessage(data); // ‚úÖ x·ª≠ l√Ω t·∫°i ƒë√¢y lu√¥n
      } catch (error) {
        console.error('‚ùå Error parsing message:', error);
      }
    };

    this.ws.onerror = (error) => {
      console.error('‚ùå WebSocket error:', error);
      this.onStatusChange('error');
      this.isConnected = false;
    };

    this.ws.onclose = () => {
      console.warn('üîå WebSocket closed. Reconnecting...');
      this.onStatusChange('disconnected');
      this.isConnected = false;
      this.attemptReconnect();
    };
  } catch (error) {
    console.error('‚ùå Failed to connect WebSocket:', error);
    this.onStatusChange('error');
  }
}


  private attemptReconnect() {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      setTimeout(() => {
        console.log(`Reconnecting... Attempt ${this.reconnectAttempts}`);
        this.connect();
      }, this.reconnectDelay * this.reconnectAttempts);
    }
  }

  public unsubscribe(stream: string) {
  this.subscriptions.delete(stream);
  this.callbacks.delete(stream);

  const symbol = stream.split('@')[0].toUpperCase();

  let message: any = null;
  if (stream.includes('@kline')) {
    const interval = stream.split('@kline_')[1];
    message = { action: 'unsubscribe', stream: 'kline', symbol, interval };
  } else if (stream.includes('@ticker')) {
    message = { action: 'unsubscribe', stream: 'ticker', symbol };
  } else if (stream.includes('@depth')) {
    message = { action: 'unsubscribe', stream: 'depth', symbol };
  } else if (stream.includes('@trade')) {
    message = { action: 'unsubscribe', stream: 'trade', symbol };
  } else if (stream.includes('@bookTicker')) {
    message = { action: 'unsubscribe', stream: 'bookTicker', symbol };
  } else if (stream.includes('@miniTicker')) {
    message = { action: 'unsubscribe', stream: 'miniTicker', symbol };
  }

  if (this.ws && this.ws.readyState === WebSocket.OPEN && message) {
    this.ws.send(JSON.stringify(message));
    console.log('üì° Sent unsubscribe:', message);
  }
}

  public setStatusCallback(callback: (status: ConnectionStatus) => void) {
    this.onStatusChange = callback;
  }

 public subscribe(stream: string, callback?: (data: any) => void) {
  if (callback) this.callbacks.set(stream, callback);
  this.subscriptions.add(stream);

  // T√πy theo lo·∫°i stream, t·∫°o JSON message ph√π h·ª£p
  let message: any = null;

  if (stream.includes('@kline')) {
    const [symbol, interval] = stream.split('@kline_');
    message = { action: 'subscribePublicKline', symbol: symbol.toUpperCase(), interval };
  } else if (stream.includes('@ticker')) {
    const symbol = stream.split('@')[0];
    message = { action: 'subscribePublicTicker', symbol: symbol.toUpperCase() };
  } else if (stream.includes('@depth')) {
    const [symbol] = stream.split('@');
    message = { action: 'subscribePublicDepth', symbol: symbol.toUpperCase(), levels: '20', speed: '1000ms' };
  } else if (stream.includes('@trade')) {
    const symbol = stream.split('@')[0];
    message = { action: 'subscribePublicTrade', symbol: symbol.toUpperCase() };
  } else if (stream.includes('@bookTicker')) {
    const symbol = stream.split('@')[0];
    message = { action: 'subscribePublicBookTicker', symbol: symbol.toUpperCase() };
  } else if (stream.includes('@miniTicker')) {
    const symbol = stream.split('@')[0];
    message = { action: 'subscribePublicMiniTicker', symbol: symbol.toUpperCase() };
  }

  if (this.isConnected && this.ws && message) {
  this.ws.send(JSON.stringify(message));
  console.log('üì° Sent subscribe:', message);
} else {
  console.warn('‚ö†Ô∏è WebSocket not ready. Retrying subscribe for:', stream);

  // üïí Th·ª≠ l·∫°i sau 1 gi√¢y n·∫øu WebSocket ch∆∞a s·∫µn s√†ng
  setTimeout(() => this.subscribe(stream, callback), 1000);
}


  console.log(`Subscribed to ${stream}`);
}


  public getSubscriptions(): string[] {
    return Array.from(this.subscriptions);
  }

  public authenticate(apiKey: string, signature: string) {
    // TODO: Implement authentication
    this.isAuthenticated = true;
    console.log('WebSocket authenticated');
  }

  public disconnect() {
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
    this.subscriptions.clear();
    this.callbacks.clear();
    this.onStatusChange('disconnected');
  }
}

export default function TradingTerminal() {


  const [currentSymbol, setCurrentSymbol] = useState('BTCUSDT');
  const [symbols, setSymbols] = useState([]);
  // State management
  const [selectedSymbol, setSelectedSymbol] = useState('BTCUSDT');
  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>('connecting');
  const [wsService] = useState(() => new BinanceWebSocketService());
  
  // Market data states
  const [klineData, setKlineData] = useState<KlineData | null>(null);
  const [tickerData, setTickerData] = useState<TickerData | null>(null);
  const [orderBook, setOrderBook] = useState<OrderBookData | null>(null);
  const [recentTrades, setRecentTrades] = useState<TradeData[]>([]);
  const [bookTicker, setBookTicker] = useState<BookTickerData | null>(null);
  const [miniTicker, setMiniTicker] = useState<MiniTickerData | null>(null);
  
  // Account data states (for authenticated users)
  const [accountInfo, setAccountInfo] = useState<AccountInfo | null>(null);
  const [orderUpdates, setOrderUpdates] = useState<OrderUpdate[]>([]);
  
  // UI states
  const [activeOrderTab, setActiveOrderTab] = useState<'limit' | 'market' | 'stop'>('limit');
  const [tradeSide, setTradeSide] = useState<'buy' | 'sell'>('buy');
  const [subscriptions, setSubscriptions] = useState<string[]>([]);
  
  // Trading form states
  const [price, setPrice] = useState('');
  const [amount, setAmount] = useState('');
  const [total, setTotal] = useState('');
  const [klineSeries, setKlineSeries] = useState<any[]>([]);


  // Initialize WebSocket connections
  useEffect(() => {
    wsService.setStatusCallback(setConnectionStatus);
    
    // Subscribe to public streams
    const streams = [
      `${selectedSymbol.toLowerCase()}@kline_1m`,
      `${selectedSymbol.toLowerCase()}@ticker`,
      `${selectedSymbol.toLowerCase()}@depth20`,
      `${selectedSymbol.toLowerCase()}@trade`,
      `${selectedSymbol.toLowerCase()}@bookTicker`,
      `${selectedSymbol.toLowerCase()}@miniTicker`
    ];
    
    streams.forEach(stream => {
      wsService.subscribe(stream, (data) => {
        handleStreamData(stream, data);
      });
    });
    
    setSubscriptions(wsService.getSubscriptions());
    
    return () => {
      wsService.disconnect();
    };
  }, [selectedSymbol]);

  const handleStreamData = (stream: string, data: any) => {
    // TODO: Handle real WebSocket data
    if (stream.includes('@kline') && data?.k) {
  const k = data.k;

  const candle = {
    time: Math.floor(k.t / 1000),
    open: parseFloat(k.o),
    high: parseFloat(k.h),
    low: parseFloat(k.l),
    close: parseFloat(k.c),
  };

  setKlineSeries(prev => {
    const updated = [...prev, candle];
    return updated.slice(-200); // gi·ªØ t·ªëi ƒëa 200 c√¢y n·∫øn g·∫ßn nh·∫•t
  });

  setKlineData({
    symbol: k.s,
    openTime: k.t,
    closeTime: k.T,
    open: k.o,
    high: k.h,
    low: k.l,
    close: k.c,
    volume: k.v,
    trades: k.n,
  });
} else if (stream.includes('@ticker')) {
      setTickerData(data);
    } else if (stream.includes('@depth')) {
      setOrderBook(data);
    } else if (stream.includes('@trade')) {
      setRecentTrades(prev => {
        const newTrades = [data, ...prev.slice(0, 49)];
        return newTrades.sort((a, b) => b.time - a.time);
      });
    } else if (stream.includes('@bookTicker')) {
      setBookTicker(data);
    } else if (stream.includes('@miniTicker')) {
      setMiniTicker(data);
    }
  };

  const handleUnsubscribe = (stream: string) => {
    wsService.unsubscribe(stream);
    setSubscriptions(wsService.getSubscriptions());
  };

  const calculateTotal = (price: string, amount: string) => {
    if (price && amount) {
      const calculatedTotal = parseFloat(price) * parseFloat(amount);
      return calculatedTotal.toFixed(8);
    }
    return '';
  };

  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newAmount = e.target.value;
    setAmount(newAmount);
    setTotal(calculateTotal(price, newAmount));
  };

  const handlePriceChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newPrice = e.target.value;
    setPrice(newPrice);
    setTotal(calculateTotal(newPrice, amount));
  };

  const handleTotalChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newTotal = e.target.value;
    setTotal(newTotal);
    
    if (newTotal && price && parseFloat(price) !== 0) {
      const calculatedAmount = (parseFloat(newTotal) / parseFloat(price)).toFixed(8);
      setAmount(calculatedAmount);
    } else {
      setAmount('');
    }
  };

   useEffect(() => {
    // Gi·∫£ s·ª≠ b·∫°n c√≥ API g·ªçi ƒë∆∞·ª£c symbol list
    fetch('/api/symbols') // ho·∫∑c get t·ª´ context/cache
      .then((res) => res.json())
      .then((data) => setSymbols(data));
  }, []);
  const reSubscribeWebSocket = (symbol: string) => {
  const oldStreams = [
    `${selectedSymbol.toLowerCase()}@kline_1m`,
    `${selectedSymbol.toLowerCase()}@ticker`,
    `${selectedSymbol.toLowerCase()}@depth20`,
    `${selectedSymbol.toLowerCase()}@trade`,
    `${selectedSymbol.toLowerCase()}@bookTicker`,
    `${selectedSymbol.toLowerCase()}@miniTicker`
  ];

  // Unsubscribe
  oldStreams.forEach(stream => wsService.unsubscribe(stream));

  // Update state
  setSelectedSymbol(symbol);

  // Subscribe to new streams
  const newStreams = [
    `${symbol.toLowerCase()}@kline_1m`,
    `${symbol.toLowerCase()}@ticker`,
    `${symbol.toLowerCase()}@depth20`,
    `${symbol.toLowerCase()}@trade`,
    `${symbol.toLowerCase()}@bookTicker`,
    `${symbol.toLowerCase()}@miniTicker`
  ];

  newStreams.forEach(stream => {
    wsService.subscribe(stream, (data) => handleStreamData(stream, data));
  });

  setSubscriptions(wsService.getSubscriptions());
};

useEffect(() => {
  setSymbols([
    { symbol: 'BTCUSDT' },
    { symbol: 'ETHUSDT' },
    { symbol: 'DOGEUSDT' },
    { symbol: 'BNBUSDT' },
  ]);
}, []);
  return (
    <div className="h-[calc(100vh-6rem)] bg-dark-900">
      {/* Top Bar - Symbol selector and stats */}
      <div className="border-b border-dark-700 bg-dark-800">
        <div className="flex items-center justify-between px-4 py-2">
          {/* Left: Symbol and basic info */}
          <div className="flex items-center space-x-6">
            <div className="flex items-center">
<SymbolSelector
  symbols={symbols}
  currentSymbol={selectedSymbol}
  onChange={(symbol) => {
    setSelectedSymbol(symbol);
    reSubscribeWebSocket(symbol);
  }}
/>

  <Star className="h-4 w-4 text-dark-400 hover:text-warning-300 ml-2 cursor-pointer" />
              <Star className="h-4 w-4 text-dark-400 hover:text-warning-300 ml-2 cursor-pointer" />
            </div>
            
            {/* Price display - will show when data is available */}
            {tickerData && (
              <>
                <div className="flex flex-col">
                  <span className="text-lg font-bold">
                    {parseFloat(tickerData.lastPrice).toFixed(4)}
                  </span>
                  <span className="text-xs text-dark-400">‚âà ${parseFloat(tickerData.lastPrice).toFixed(2)}</span>
                </div>
                
                <div className="flex flex-col">
                  <span className={`text-sm font-medium ${
                    parseFloat(tickerData.priceChange) >= 0 ? 'text-success-500' : 'text-danger-500'
                  }`}>
                    {parseFloat(tickerData.priceChange) >= 0 ? '+' : ''}{parseFloat(tickerData.priceChange).toFixed(4)}
                  </span>
                  <span className={`text-xs ${
                    parseFloat(tickerData.priceChangePercent) >= 0 ? 'text-success-500' : 'text-danger-500'
                  }`}>
                    {parseFloat(tickerData.priceChangePercent) >= 0 ? '+' : ''}{tickerData.priceChangePercent}%
                  </span>
                </div>
              </>
            )}
          </div>
          
          {/* Right: Connection status and controls */}
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              {connectionStatus === 'connected' ? (
                <Wifi className="h-4 w-4 text-success-500" />
              ) : (
                <WifiOff className="h-4 w-4 text-danger-500" />
              )}
              <span className="text-xs text-dark-400 capitalize">{connectionStatus}</span>
            </div>
            
            <div className="text-xs text-dark-400">
              Subscriptions: {subscriptions.length}
            </div>
            
            <button className="p-1 hover:bg-dark-700 rounded">
              <Settings className="h-4 w-4 text-dark-400" />
            </button>
          </div>
        </div>
        
        {/* Stats bar */}
        {tickerData && (
          <div className="flex items-center space-x-8 px-4 py-2 text-xs border-t border-dark-700">
            <div className="flex flex-col">
              <span className="text-dark-400">24h High</span>
              <span className="font-medium">{parseFloat(tickerData.highPrice).toFixed(4)}</span>
            </div>
            <div className="flex flex-col">
              <span className="text-dark-400">24h Low</span>
              <span className="font-medium">{parseFloat(tickerData.lowPrice).toFixed(4)}</span>
            </div>
            <div className="flex flex-col">
              <span className="text-dark-400">24h Volume ({selectedSymbol.replace('USDT', '')})</span>
              <span className="font-medium">{parseFloat(tickerData.volume).toLocaleString()}</span>
            </div>
            <div className="flex flex-col">
              <span className="text-dark-400">24h Volume (USDT)</span>
              <span className="font-medium">{parseFloat(tickerData.quoteVolume).toLocaleString()}</span>
            </div>
          </div>
        )}
      </div>

      {/* Main content - Horizontal layout with chart on left */}
      <div className="flex gap-1 h-[calc(100%-120px)]">
        {/* Left - Chart (takes most space) */}
        <div className="flex-1 bg-dark-800 border-r border-dark-700">
          <div className="h-full flex flex-col">
            {/* Chart controls */}
            <div className="flex items-center justify-between p-3 border-b border-dark-700">
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <button className="text-xs px-2 py-1 bg-dark-700 rounded hover:bg-dark-600">1m</button>
                  <button className="text-xs px-2 py-1 hover:bg-dark-700 rounded">5m</button>
                  <button className="text-xs px-2 py-1 hover:bg-dark-700 rounded">15m</button>
                  <button className="text-xs px-2 py-1 hover:bg-dark-700 rounded">1h</button>
                  <button className="text-xs px-2 py-1 hover:bg-dark-700 rounded">4h</button>
                  <button className="text-xs px-2 py-1 hover:bg-dark-700 rounded">1d</button>
                </div>
                
                <div className="h-4 w-px bg-dark-600" />
                
                <div className="flex items-center space-x-2">
                  <button className="text-xs px-2 py-1 bg-dark-700 rounded hover:bg-dark-600">Candlesticks</button>
                  <button className="text-xs px-2 py-1 hover:bg-dark-700 rounded">Line</button>
                </div>
              </div>
              
              <div className="flex items-center space-x-2">
                <button className="p-1 hover:bg-dark-700 rounded">
                  <TrendingUp className="h-4 w-4 text-dark-400" />
                </button>
                <button className="p-1 hover:bg-dark-700 rounded">
                  <Maximize2 className="h-4 w-4 text-dark-400" />
                </button>
              </div>
            </div>
            
            {/* Chart area */}
            <div className="flex-1 relative">
              <TradingViewChart data={klineSeries} />

              
              {/* Chart overlay info */}
              <div className="absolute top-4 left-4 bg-dark-800/80 rounded p-2 text-xs">
                {klineData ? (
                  <div className="space-y-1">
                    <div>O: <span className="font-mono">{parseFloat(klineData.open).toFixed(4)}</span></div>
                    <div>H: <span className="font-mono text-success-500">{parseFloat(klineData.high).toFixed(4)}</span></div>
                    <div>L: <span className="font-mono text-danger-500">{parseFloat(klineData.low).toFixed(4)}</span></div>
                    <div>C: <span className="font-mono">{parseFloat(klineData.close).toFixed(4)}</span></div>
                    <div>V: <span className="font-mono">{parseFloat(klineData.volume).toLocaleString()}</span></div>
                  </div>
                ) : (
                  <div className="text-dark-400">Waiting for data...</div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Center - Order book */}
        <div className="w-64 bg-dark-800 border-r border-dark-700">
          <div className="h-full flex flex-col">
            <div className="flex items-center justify-between p-3 border-b border-dark-700">
              <h3 className="text-sm font-medium">Order Book</h3>
              <div className="flex items-center space-x-2">
                <button className="text-xs text-dark-400 hover:text-dark-200">0.01</button>
                <Settings className="h-3 w-3 text-dark-400" />
              </div>
            </div>
            
            <div className="flex-1 overflow-hidden">
              {orderBook ? (
                <div className="h-full flex flex-col">
                  {/* Asks */}
                  <div className="flex-1 overflow-y-auto">
                    <div className="space-y-0.5 p-2">
                      {orderBook.asks.slice(0, 15).reverse().map((ask, index) => (
                        <div key={index} className="flex justify-between text-xs relative">
                          <span className="text-danger-500 font-mono">{parseFloat(ask.price).toFixed(4)}</span>
                          <span className="text-dark-300 font-mono">{parseFloat(ask.quantity).toFixed(3)}</span>
                          <div 
                            className="absolute right-0 top-0 h-full bg-danger-500/10"
                            style={{ width: `${Math.min(parseFloat(ask.quantity) / 10 * 100, 100)}%` }}
                          />
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  {/* Current price */}
                  <div className="px-2 py-1 border-y border-dark-700">
                    <div className="text-center">
                      <div className={`text-sm font-bold ${
                        tickerData && parseFloat(tickerData.priceChange) >= 0 ? 'text-success-500' : 'text-danger-500'
                      }`}>
                        {tickerData ? parseFloat(tickerData.lastPrice).toFixed(4) : '0.0000'}
                      </div>
                      <div className="text-xs text-dark-400">‚âà ${tickerData ? parseFloat(tickerData.lastPrice).toFixed(2) : '0.00'}</div>
                    </div>
                  </div>
                  
                  {/* Bids */}
                  <div className="flex-1 overflow-y-auto">
                    <div className="space-y-0.5 p-2">
                      {orderBook.bids.slice(0, 15).map((bid, index) => (
                        <div key={index} className="flex justify-between text-xs relative">
                          <span className="text-success-500 font-mono">{parseFloat(bid.price).toFixed(4)}</span>
                          <span className="text-dark-300 font-mono">{parseFloat(bid.quantity).toFixed(3)}</span>
                          <div 
                            className="absolute right-0 top-0 h-full bg-success-500/10"
                            style={{ width: `${Math.min(parseFloat(bid.quantity) / 10 * 100, 100)}%` }}
                          />
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              ) : (
                <div className="flex items-center justify-center h-full text-dark-400">
                  <div className="text-center">
                    <div className="text-sm">No order book data</div>
                    <div className="text-xs mt-1">Waiting for WebSocket connection...</div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Right - Trading and Recent trades */}
        <div className="w-80 bg-dark-800 border-l border-dark-700">
          <div className="h-full flex flex-col">
            {/* Trading form */}
            <div className="border-b border-dark-700">
              <div className="flex border-b border-dark-700">
                <button
                  className={`flex-1 py-2 text-xs font-medium ${
                    activeOrderTab === 'limit'
                      ? 'border-b-2 border-primary-500 text-primary-500'
                      : 'text-dark-400 hover:text-dark-300'
                  }`}
                  onClick={() => setActiveOrderTab('limit')}
                >
                  Limit
                </button>
                <button
                  className={`flex-1 py-2 text-xs font-medium ${
                    activeOrderTab === 'market'
                      ? 'border-b-2 border-primary-500 text-primary-500'
                      : 'text-dark-400 hover:text-dark-300'
                  }`}
                  onClick={() => setActiveOrderTab('market')}
                >
                  Market
                </button>
                <button
                  className={`flex-1 py-2 text-xs font-medium ${
                    activeOrderTab === 'stop'
                      ? 'border-b-2 border-primary-500 text-primary-500'
                      : 'text-dark-400 hover:text-dark-300'
                  }`}
                  onClick={() => setActiveOrderTab('stop')}
                >
                  Stop-Limit
                </button>
              </div>
              
              <div className="p-3">
                <div className="flex space-x-1 mb-3">
                  <button
                    className={`flex-1 py-2 text-xs font-medium rounded ${
                      tradeSide === 'buy'
                        ? 'bg-success-500 text-white'
                        : 'bg-dark-700 text-dark-300 hover:bg-dark-600'
                    }`}
                    onClick={() => setTradeSide('buy')}
                  >
                    Buy
                  </button>
                  <button
                    className={`flex-1 py-2 text-xs font-medium rounded ${
                      tradeSide === 'sell'
                        ? 'bg-danger-500 text-white'
                        : 'bg-dark-700 text-dark-300 hover:bg-dark-600'
                    }`}
                    onClick={() => setTradeSide('sell')}
                  >
                    Sell
                  </button>
                </div>
                
                <div className="space-y-3">
                  {/* Available balance */}
                  <div className="flex justify-between text-xs">
                    <span className="text-dark-400">Available</span>
                    <span>0.00000000 {tradeSide === 'buy' ? 'USDT' : selectedSymbol.replace('USDT', '')}</span>
                  </div>
                  
                  {activeOrderTab !== 'market' && (
                    <div>
                      <label className="block text-xs text-dark-400 mb-1">Price</label>
                      <div className="relative">
                        <input
                          type="text"
                          className="w-full bg-dark-700 border border-dark-600 rounded px-3 py-2 text-xs focus:border-primary-500 focus:outline-none"
                          placeholder="0.00"
                          value={price}
                          onChange={handlePriceChange}
                        />
                        <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                          <span className="text-dark-400 text-xs">USDT</span>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  <div>
                    <label className="block text-xs text-dark-400 mb-1">Amount</label>
                    <div className="relative">
                      <input
                        type="text"
                        className="w-full bg-dark-700 border border-dark-600 rounded px-3 py-2 text-xs focus:border-primary-500 focus:outline-none"
                        placeholder="0.00000000"
                        value={amount}
                        onChange={handleAmountChange}
                      />
                      <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                        <span className="text-dark-400 text-xs">{selectedSymbol.replace('USDT', '')}</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-4 gap-1">
                    {[25, 50, 75, 100].map((percent) => (
                      <button
                        key={percent}
                        className="py-1 text-xs bg-dark-700 rounded text-dark-300 hover:bg-dark-600"
                      >
                        {percent}%
                      </button>
                    ))}
                  </div>
                  
                  <div>
                    <label className="block text-xs text-dark-400 mb-1">Total</label>
                    <div className="relative">
                      <input
                        type="text"
                        className="w-full bg-dark-700 border border-dark-600 rounded px-3 py-2 text-xs focus:border-primary-500 focus:outline-none"
                        placeholder="0.00"
                        value={total}
                        onChange={handleTotalChange}
                      />
                      <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                        <span className="text-dark-400 text-xs">USDT</span>
                      </div>
                    </div>
                  </div>
                  
                  <button
                    className={`w-full py-2 rounded text-xs font-medium ${
                      tradeSide === 'buy'
                        ? 'bg-success-500 hover:bg-success-600 text-white'
                        : 'bg-danger-500 hover:bg-danger-600 text-white'
                    }`}
                  >
                    {tradeSide === 'buy' ? 'Buy' : 'Sell'} {selectedSymbol.replace('USDT', '')}
                  </button>
                </div>
              </div>
            </div>
            
            {/* Recent trades */}
            <div className="flex-1 overflow-hidden">
              <div className="flex items-center justify-between p-3 border-b border-dark-700">
                <h3 className="text-sm font-medium">Recent Trades</h3>
                <button className="text-xs text-dark-400 hover:text-dark-200">More</button>
              </div>
              
              <div className="overflow-y-auto h-full">
                <div className="px-3 py-2 border-b border-dark-700">
                  <div className="grid grid-cols-3 gap-2 text-xs text-dark-400">
                    <span>Price (USDT)</span>
                    <span className="text-right">Amount ({selectedSymbol.replace('USDT', '')})</span>
                    <span className="text-right">Time</span>
                  </div>
                </div>
                
                <div className="space-y-0">
                  {recentTrades.length > 0 ? (
  recentTrades
    .filter((trade) => trade && typeof trade === 'object' && 'isBuyerMaker' in trade)
    .map((trade) => (
      <div key={trade.id} className="px-3 py-1 hover:bg-dark-700/50">
        <div className="grid grid-cols-3 gap-2 text-xs">
          <span
            className={`font-mono ${
              trade.isBuyerMaker ? 'text-danger-500' : 'text-success-500'
            }`}
          >
            {parseFloat(trade.price).toFixed(4)}
          </span>
          <span className="text-right font-mono text-dark-300">
            {parseFloat(trade.qty).toFixed(3)}
          </span>
          <span className="text-right text-dark-400">
            {new Date(trade.time).toLocaleTimeString('en-US', {
              hour12: false,
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit',
            })}
          </span>
        </div>
      </div>
    ))
) : (
  <div className="p-4 text-center text-dark-400">
    <div className="text-sm">No recent trades</div>
    <div className="text-xs mt-1">Waiting for WebSocket data...</div>
  </div>
)}

                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Bottom panel - Open orders and WebSocket info */}
      <div className="h-40 border-t border-dark-700 bg-dark-800">
        <div className="flex h-full">
          {/* Open Orders */}
          <div className="flex-1 border-r border-dark-700">
            <div className="flex items-center justify-between p-3 border-b border-dark-700">
              <div className="flex items-center space-x-4">
                <h3 className="text-sm font-medium">Open Orders</h3>
                <span className="text-xs text-dark-400">(0)</span>
              </div>
              <button className="text-xs text-danger-500 hover:text-danger-400">Cancel All</button>
            </div>
            
            <div className="p-4 text-center text-dark-400">
              <div className="text-sm">No open orders</div>
              <div className="text-xs mt-1">Your open orders will appear here</div>
            </div>
          </div>
          
          {/* Order History */}
          <div className="flex-1 border-r border-dark-700">
            <div className="flex items-center justify-between p-3 border-b border-dark-700">
              <h3 className="text-sm font-medium">Order History</h3>
              <button className="text-xs text-dark-400 hover:text-dark-200">View All</button>
            </div>
            
            <div className="p-4 text-center text-dark-400">
              <div className="text-sm">No order history</div>
              <div className="text-xs mt-1">Your completed orders will appear here</div>
            </div>
          </div>
          
          {/* WebSocket Subscriptions */}
          <div className="w-80">
            <div className="flex items-center justify-between p-3 border-b border-dark-700">
              <h3 className="text-sm font-medium">Active Streams</h3>
              <span className="text-xs text-dark-400">({subscriptions.length})</span>
            </div>
            
            <div className="overflow-y-auto h-[calc(100%-41px)]">
              <div className="p-2 space-y-1 max-h-32 overflow-y-auto">
                {subscriptions.map((stream, index) => (
                  <div key={index} className="flex items-center justify-between p-2 bg-dark-700/50 rounded text-xs">
                    <span className="font-mono text-dark-300 truncate">{stream}</span>
                    <button
                      onClick={() => handleUnsubscribe(stream)}
                      className="text-danger-500 hover:text-danger-400 ml-2"
                    >
                      √ó
                    </button>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}